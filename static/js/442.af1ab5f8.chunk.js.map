{"version":3,"file":"static/js/442.af1ab5f8.chunk.js","mappings":"mPAAaA,EAAgB,CACzBC,KAAM,GACNC,MAAO,GACPC,SAAU,ICHDC,EACH,CACFC,MAAO,OACPJ,KAAM,OACNK,KAAM,OACNC,YAAa,aACbC,UAAU,GANLJ,EAQF,CACHC,MAAO,QACPJ,KAAM,QACNK,KAAM,QACNC,YAAa,cACbC,UAAU,GAbLJ,EAeC,CACNC,MAAO,WACPJ,KAAM,WACNK,KAAM,WACNC,YAAa,iBACbC,UAAU,G,oBCnBlB,EAAwB,yBAAxB,EAAyD,yBAAzD,EAA0F,yB,SCGpFC,EAAY,SAAC,GAAiE,IAAhEJ,EAA+D,EAA/DA,MAAOJ,EAAwD,EAAxDA,KAAMS,EAAkD,EAAlDA,MAAOC,EAA2C,EAA3CA,SAAUJ,EAAiC,EAAjCA,YAAaD,EAAoB,EAApBA,KAAME,EAAc,EAAdA,SAC3DI,GAAKC,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,QAAU,IAEnC,OACI,iBAAKC,UAAWC,EAAhB,UACKX,IAAS,mBAAOU,UAAWC,EAAcC,QAASL,EAAzC,UAA8CP,EAA9C,QACV,kBAAOU,UAAWC,EAAcJ,GAAIA,EAAIX,KAAMA,EAAMS,MAAOA,EAAOC,SAAUA,EAAUJ,YAAaA,EAAaC,SAAUA,EAAUF,KAAMA,QAKtJG,EAAUS,aAAe,CACrBZ,KAAM,OACNE,UAAU,GAGd,QCAA,EAdqB,SAAC,GAAgB,IAAfW,EAAc,EAAdA,SACnB,GAA4CC,EAAAA,EAAAA,GAAQ,CAACD,SAAAA,EAAUnB,aAAAA,IAAxDqB,EAAP,EAAOA,MAAOC,EAAd,EAAcA,aAAcC,EAA5B,EAA4BA,aAErBtB,EAAyBoB,EAAzBpB,KAAMC,EAAmBmB,EAAnBnB,MAAOC,EAAYkB,EAAZlB,SACpB,OACI,kBAAMgB,SAAUI,EAAhB,WACI,SAACC,GAAD,QAAWd,MAAOT,EAAMU,SAAUW,GAAkBlB,KACpD,SAACoB,GAAD,QAAWd,MAAOR,EAAOS,SAAUW,GAAkBlB,KACrD,SAACoB,GAAD,QAAWd,MAAOP,EAAUQ,SAAUW,GAAkBlB,KACxD,mBAAQE,KAAK,SAAb,0BCUZ,EAnBqB,WACjB,IAAMmB,GAAWC,EAAAA,EAAAA,MAGjB,IAFgBC,EAAAA,EAAAA,KAGZ,OAAO,SAAC,KAAD,CAAUC,GAAG,MAMxB,OACI,4BACG,0CACC,SAAC,EAAD,CAAcT,SANL,SAACU,GACdJ,GAASK,EAAAA,EAAAA,IAAOD,Y,gECUxB,IAvBgB,SAAC,GAA8C,IAA7CV,EAA4C,EAA5CA,SAAUnB,EAAkC,EAAlCA,aAAkC,IAApB+B,QAAAA,OAAoB,SAC1D,GAA0BC,EAAAA,EAAAA,WAAS,UAAIhC,IAAvC,eAAOqB,EAAP,KAAcY,EAAd,KAmBA,MAAO,CAACZ,MAAAA,EAAOY,SAAAA,EAAUX,aAjBJ,SAAC,GAAc,IAAbY,EAAY,EAAZA,OACXjC,EAA+BiC,EAA/BjC,KAAMS,EAAyBwB,EAAzBxB,MAAOJ,EAAkB4B,EAAlB5B,KAAM6B,EAAYD,EAAZC,QACrBC,EAAoB,aAAT9B,EAAsB6B,EAAUzB,EACjDuB,GAAS,SAAAI,GAAS,yBACXA,GADW,cAEbpC,EAAOmC,QAYuBb,aARlB,SAACe,GAClBA,EAAEC,iBACFpB,GAAS,UAAIE,IACVU,GACCE,GAAS,UAAIjC","sources":["components/RegisterForm/initialState.js","components/RegisterForm/fields.js","webpack://react-homework-template/./src/components/RegisterForm/Textfield/textfield.module.css?6785","components/RegisterForm/Textfield/Textfield.jsx","components/RegisterForm/RegisterForm.jsx","pages/RegisterPage/RegisterPage.jsx","shared/hooks/useForm.js"],"sourcesContent":["export const initialState =  {\n    name: \"\",\n    email: \"\",\n    password: \"\",\n}","export const fields = {\n    name: {\n        label: \"Name\",\n        name: \"name\",\n        type: \"text\",\n        placeholder: \"Input name\",\n        required: true,\n    },\n    email: {\n        label: \"Email\",\n        name: \"email\",\n        type: \"email\",\n        placeholder: \"Input email\",\n        required: true,\n    },\n    password: {\n        label: \"Password\",\n        name: \"password\",\n        type: \"password\",\n        placeholder: \"Input password\",\n        required: true,\n    },\n}","// extracted by mini-css-extract-plugin\nexport default {\"block\":\"textfield_block__EUQp-\",\"label\":\"textfield_label__10nee\",\"input\":\"textfield_input__v1uLr\"};","import { useMemo } from \"react\";\nimport { nanoid } from \"@reduxjs/toolkit\";\nimport styles from \"./textfield.module.css\";\n\nconst Textfiels = ({label, name, value, onChange, placeholder, type, required}) => {\n    const id = useMemo(() => nanoid(), []);\n\n    return(\n        <div className={styles.block}>\n            {label && <label className={styles.label} htmlFor={id}>{label} </label>}\n            <input className={styles.input} id={id} name={name} value={value} onChange={onChange} placeholder={placeholder} required={required} type={type}/>\n        </div>\n    )\n}\n\nTextfiels.defaultProps = {\n    type: \"text\",\n    required: false,\n}\n\nexport default Textfiels;","import useForm from \"../../shared/hooks/useForm\";\nimport { initialState } from \"./initialState\";\nimport { fields } from \"./fields\";\n\nimport Textfield from \"./Textfield\";\n\nconst RegisterForm = ({onSubmit}) => {\n    const {state, handleChange, handleSubmit} = useForm({onSubmit, initialState});\n\n    const {name, email, password} = state;\n    return (\n        <form onSubmit={handleSubmit}>\n            <Textfield value={name} onChange={handleChange} {...fields.name}/>\n            <Textfield value={email} onChange={handleChange} {...fields.email}/>\n            <Textfield value={password} onChange={handleChange} {...fields.password}/>\n            <button type=\"submit\">Register</button>\n        </form>\n    )\n}\n\nexport default RegisterForm;","import { useDispatch } from \"react-redux\";\nimport { Navigate } from \"react-router-dom\";\nimport useAuth from \"../../shared/hooks/useAuth\";\nimport { signup } from \"redux/auth/auth-operations\";\nimport RegisterForm from \"../../components/RegisterForm\";\n\nconst RegisterPage = () => {\n    const dispatch = useDispatch();\n    const isLogin = useAuth();\n\n    if(isLogin) {\n        return <Navigate to=\"/\"/>\n    }\n\n    const onSignup = (data) => {\n        dispatch(signup(data));\n    }\n    return(\n        <div>\n           <p>Register Page</p>\n            <RegisterForm onSubmit={onSignup} />  \n        </div>\n    )\n}\n\nexport default RegisterPage; ","import {useState} from \"react\";\n\nconst useForm = ({onSubmit, initialState, isReset = true}) => {\n    const [state, setState] = useState({...initialState});\n\n    const handleChange = ({target}) => {\n        const { name, value, type, checked } = target;\n        const newValue = type === \"checkbox\" ? checked : value;\n        setState(prevState => ({\n            ...prevState,\n            [name]: newValue\n        }))\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        onSubmit({...state});\n        if(isReset) {\n            setState({...initialState})\n        }\n    };\n\n    return {state, setState, handleChange, handleSubmit};\n}\n\nexport default useForm;"],"names":["initialState","name","email","password","fields","label","type","placeholder","required","Textfiels","value","onChange","id","useMemo","nanoid","className","styles","htmlFor","defaultProps","onSubmit","useForm","state","handleChange","handleSubmit","Textfield","dispatch","useDispatch","useAuth","to","data","signup","isReset","useState","setState","target","checked","newValue","prevState","e","preventDefault"],"sourceRoot":""}